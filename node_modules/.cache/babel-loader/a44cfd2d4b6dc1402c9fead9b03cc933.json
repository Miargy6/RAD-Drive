{"ast":null,"code":"import { useReducer, useEffect } from \"react\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { database } from \"../firebase\";\nconst ACTIONS = {\n  SELECT_FOLDER: \"select-folder\",\n  UPDATE_FOLDER: \"update-folder\",\n  SET_CHILD_FOLDERS: \"set-child-folders\",\n  SET_CHILD_FILES: \"set-child-files\",\n  SET_CHILD_TABLE_DATA: \"set-child-table-data\"\n};\nexport const ROOT_FOLDER = {\n  name: \"Home\",\n  id: null,\n  path: []\n};\n\nfunction reducer(state, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case ACTIONS.SELECT_FOLDER:\n      return {\n        folderId: payload.folderId,\n        folder: payload.folder,\n        childFiles: [],\n        childFolders: [],\n        childTableData: []\n      };\n\n    case ACTIONS.UPDATE_FOLDER:\n      return { ...state,\n        folder: payload.folder\n      };\n\n    case ACTIONS.SET_CHILD_FOLDERS:\n      return { ...state,\n        childFolders: payload.childFolders\n      };\n\n    case ACTIONS.SET_CHILD_FILES:\n      return { ...state,\n        childFiles: payload.childFiles\n      };\n\n    case ACTIONS.SET_CHILD_TABLE_DATA:\n      return { ...state,\n        childTableData: payload.childTableData\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport function useFolder(folderId = null, folder = null) {\n  const [state, dispatch] = useReducer(reducer, {\n    folderId,\n    folder,\n    childFolders: [],\n    childFiles: [],\n    childTableData: []\n  });\n  const {\n    currentUser\n  } = useAuth();\n  useEffect(() => {\n    dispatch({\n      type: ACTIONS.SELECT_FOLDER,\n      payload: {\n        folderId,\n        folder\n      }\n    });\n  }, [folderId, folder]);\n  useEffect(() => {\n    if (folderId == null) {\n      return dispatch({\n        type: ACTIONS.UPDATE_FOLDER,\n        payload: {\n          folder: ROOT_FOLDER\n        }\n      });\n    }\n\n    database.folders.doc(folderId).get().then(doc => {\n      dispatch({\n        type: ACTIONS.UPDATE_FOLDER,\n        payload: {\n          folder: database.formatDoc(doc)\n        }\n      });\n    }).catch(() => {\n      dispatch({\n        type: ACTIONS.UPDATE_FOLDER,\n        payload: {\n          folder: ROOT_FOLDER\n        }\n      });\n    });\n  }, [folderId]);\n  useEffect(() => {\n    return database.folders.where(\"parentId\", \"==\", folderId).where(\"userId\", \"==\", currentUser.uid).orderBy(\"createdAt\").onSnapshot(snapshot => {\n      dispatch({\n        type: ACTIONS.SET_CHILD_FOLDERS,\n        payload: {\n          childFolders: snapshot.docs.map(database.formatDoc)\n        }\n      });\n    });\n  }, [folderId, currentUser]);\n  useEffect(() => {\n    return database.files.where(\"folderId\", \"==\", folderId).where(\"userId\", \"==\", currentUser.uid).orderBy(\"createdAt\").onSnapshot(snapshot => {\n      dispatch({\n        type: ACTIONS.SET_CHILD_FILES,\n        payload: {\n          childFiles: snapshot.docs.map(database.formatDoc)\n        }\n      });\n    });\n  }, [folderId, currentUser]);\n  useEffect(() => {\n    return database.tableData.where(\"folderId\", \"==\", folderId).orderBy(\"createdAt\").onSnapshot(snapshot => {\n      dispatch({\n        type: ACTIONS.SET_CHILD_TABLE_DATA,\n        payload: {\n          childTableData: snapshot.docs.map(database.formatDoc)\n        }\n      });\n    });\n  }, [folderId]);\n  return state;\n}","map":{"version":3,"sources":["E:/GitHub/CornelderDrive/src/hooks/useFolder.js"],"names":["useReducer","useEffect","useAuth","database","ACTIONS","SELECT_FOLDER","UPDATE_FOLDER","SET_CHILD_FOLDERS","SET_CHILD_FILES","SET_CHILD_TABLE_DATA","ROOT_FOLDER","name","id","path","reducer","state","type","payload","folderId","folder","childFiles","childFolders","childTableData","useFolder","dispatch","currentUser","folders","doc","get","then","formatDoc","catch","where","uid","orderBy","onSnapshot","snapshot","docs","map","files","tableData"],"mappings":"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","sourcesContent":["import { useReducer, useEffect } from \"react\"\nimport { useAuth } from \"../contexts/AuthContext\"\nimport { database } from \"../firebase\"\n\n\n\nconst ACTIONS = {\n  SELECT_FOLDER: \"select-folder\",\n  UPDATE_FOLDER: \"update-folder\",\n  SET_CHILD_FOLDERS: \"set-child-folders\",\n  SET_CHILD_FILES: \"set-child-files\",\n  SET_CHILD_TABLE_DATA: \"set-child-table-data\",\n}\n\n\n\nexport const ROOT_FOLDER = { name: \"Home\", id: null, path: [] }\n\nfunction reducer(state, { type, payload }) {\n  switch (type) {\n    case ACTIONS.SELECT_FOLDER:\n      return {\n        folderId: payload.folderId,\n        folder: payload.folder,\n        childFiles: [],\n        childFolders: [],\n        childTableData: []\n      }\n    case ACTIONS.UPDATE_FOLDER:\n      return {\n        ...state,\n        folder: payload.folder,\n      }\n    case ACTIONS.SET_CHILD_FOLDERS:\n      return {\n        ...state,\n        childFolders: payload.childFolders,\n      }\n    case ACTIONS.SET_CHILD_FILES:\n      return {\n        ...state,\n        childFiles: payload.childFiles,\n      }\n    case ACTIONS.SET_CHILD_TABLE_DATA: \n      return {\n        ...state,\n        childTableData: payload.childTableData\n      }\n    default:\n      return state\n  }\n}\n\nexport function useFolder(folderId = null, folder = null) {\n  \n  const [state, dispatch] = useReducer(reducer, {\n    folderId,\n    folder,\n    childFolders: [],\n    childFiles: [],\n    childTableData: []\n  })\n  const { currentUser } = useAuth()\n\n  useEffect(() => {\n    dispatch({ type: ACTIONS.SELECT_FOLDER, payload: { folderId, folder } })\n  }, [folderId, folder])\n\n  useEffect(() => {\n    if (folderId == null) {\n      return dispatch({\n        type: ACTIONS.UPDATE_FOLDER,\n        payload: { folder: ROOT_FOLDER },\n      })\n    }\n\n    database.folders\n      .doc(folderId)\n      .get()\n      .then(doc => {\n        dispatch({\n          type: ACTIONS.UPDATE_FOLDER,\n          payload: { folder: database.formatDoc(doc) },\n        })\n      })\n      .catch(() => {\n        dispatch({\n          type: ACTIONS.UPDATE_FOLDER,\n          payload: { folder: ROOT_FOLDER },\n        })\n      })\n  }, [folderId])\n\n  useEffect(() => {\n    return database.folders\n      .where(\"parentId\", \"==\", folderId)\n      .where(\"userId\", \"==\", currentUser.uid)\n      .orderBy(\"createdAt\")\n      .onSnapshot(snapshot => {\n        dispatch({\n          type: ACTIONS.SET_CHILD_FOLDERS,\n          payload: { childFolders: snapshot.docs.map(database.formatDoc) },\n        })\n      })\n  }, [folderId, currentUser])\n\n  useEffect(() => {\n    return (\n      database.files\n        .where(\"folderId\", \"==\", folderId)\n        .where(\"userId\", \"==\", currentUser.uid)\n        .orderBy(\"createdAt\")\n        .onSnapshot(snapshot => {\n          dispatch({\n            type: ACTIONS.SET_CHILD_FILES,\n            payload: { childFiles: snapshot.docs.map(database.formatDoc) },\n          })\n        })\n    )\n  }, [folderId, currentUser])\n  useEffect(() => {\n    return (\n      database.tableData\n        .where(\"folderId\", \"==\", folderId)\n        .orderBy(\"createdAt\")\n        .onSnapshot(snapshot => {\n          dispatch({\n            type: ACTIONS.SET_CHILD_TABLE_DATA,\n            payload: { childTableData: snapshot.docs.map(database.formatDoc) },\n          })\n        })\n    )\n  }, [folderId])\n\n  return state\n}\n"]},"metadata":{},"sourceType":"module"}